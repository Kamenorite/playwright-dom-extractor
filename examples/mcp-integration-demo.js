/**
 * MCP Integration Demo
 * 
 * This script demonstrates how to use the DOM Extractor with Cursor MCP
 * for AI-powered semantic key generation without external API keys.
 */

const { chromium } = require('playwright');
const { DOMMonitor } = require('../dom-monitor');
const { MCPAIService } = require('../services/mcp-ai-service');
const path = require('path');
const fs = require('fs');

async function runMCPDemo() {
  console.log('\nüîç Cursor MCP Integration Demo');
  console.log('==============================\n');

  console.log('This demo shows how to use Cursor\'s Model Context Protocol (MCP)');
  console.log('to generate semantic keys without needing external API keys.\n');
  
  // Check if .cursor/mcp.json exists
  const mcpConfigPath = path.join(__dirname, '../.cursor/mcp.json');
  if (!fs.existsSync(mcpConfigPath)) {
    console.log('‚ö†Ô∏è  MCP configuration not found at: ' + mcpConfigPath);
    console.log('To use MCP integration, create a .cursor/mcp.json file with:');
    console.log(JSON.stringify({
      "mcp_server": "https://api.cursor.sh",
      "cursor_use_internal": true,
      "ai": {
        "provider": "cursor"
      }
    }, null, 2));
    console.log('\nFalling back to rule-based semantic key generation.\n');
  } else {
    console.log('‚úÖ MCP configuration found at: ' + mcpConfigPath);
  }

  // Create output directory if it doesn't exist
  const outputDir = path.join(__dirname, '../demo-output');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Initialize DOMMonitor with MCP enabled
  const domMonitor = new DOMMonitor({
    useAI: true,
    useMCP: true, // Enable MCP integration
    outputPath: outputDir,
    waitTimeout: 3000,
    featureName: 'mcp_demo',
    takeScreenshot: true,
    includeHidden: false,
    verbose: true
  });

  // Launch browser and page
  const browser = await chromium.launch({ headless: true });
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // Step 1: Navigate to demo page
    console.log('Step 1: Navigating to demo page...');
    await page.goto('https://example.com/login');
    
    // Step 2: Extract DOM elements
    console.log('Step 2: Extracting DOM elements...');
    const elements = await domMonitor.extractDOMElements(page, context);
    console.log(`Extracted ${elements.length} elements`);
    
    // Step 3: Generate semantic keys with MCP
    console.log('Step 3: Generating semantic keys using Cursor MCP...');
    const elementsWithKeys = await domMonitor.generateSemanticKeys(elements, 'https://example.com/login');
    console.log(`Generated semantic keys for ${elementsWithKeys.length} elements`);
    
    // Step 4: Save mapping to file
    console.log('Step 4: Saving mapping to output directory...');
    await domMonitor.saveOutput(elementsWithKeys, 'https://example.com/login');
    
    console.log('\nDemo complete! Output saved to:', outputDir);
    console.log('Generated files:');
    console.log(` - ${path.join(outputDir, 'mcp_demo_example_com_login.json')}`);
    console.log(` - ${path.join(outputDir, 'mcp_demo_example_com_login.html')}`);
    
    // Bonus: Show quality comparison between AI and rule-based keys
    console.log('\nüîç Bonus: AI vs. Rule-based Semantic Keys');
    console.log('---------------------------------------');
    console.log('Here are some examples of semantic keys generated by the system:');
    
    for (let i = 0; i < 5 && i < elementsWithKeys.length; i++) {
      const element = elementsWithKeys[i];
      if (element.semanticKey) {
        console.log(`${i+1}. Element: ${element.tagName}`);
        console.log(`   AI-generated key: ${element.semanticKey}`);
        console.log(`   Text content: ${element.innerText?.substring(0, 30) || 'none'}${element.innerText?.length > 30 ? '...' : ''}`);
        console.log('   -----------------');
      }
    }
    
    console.log('\nThe AI-powered keys are typically more context-aware and semantically');
    console.log('meaningful than rule-based keys, making tests more maintainable.');
  } catch (error) {
    console.error('Error in MCP demo:', error);
  } finally {
    // Clean up
    await browser.close();
  }
  
  console.log('\nüìö Learn more about MCP integration in docs/MCP-INTEGRATION.md');
}

// Run the demo
runMCPDemo().catch(console.error); 