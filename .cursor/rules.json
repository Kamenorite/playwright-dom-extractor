{
  "rules": [
    {
      "name": "Suggest Semantic Selectors",
      "pattern": "page\\.locator\\([\"']([^\"']+)[\"']\\)",
      "description": "Suggests semantic selectors for Playwright tests",
      "message": "Consider using semantic selectors for better test maintainability",
      "severity": "suggestion",
      "languages": ["typescript"],
      "filePattern": "**/*.spec.ts",
      "prompts": [
        {
          "name": "Convert to Semantic Selector",
          "prompt": "@TRANSLATE_SELECTOR: {{match.1}}\n\nThis looks like a literal selector in a Playwright test. Please translate this to a semantic selector using the smart matching capabilities. Provide the best semantic key to replace this literal selector.",
          "promptFile": "semantic-ai-master.mdc"
        }
      ],
      "actions": [
        {
          "name": "Convert to Semantic Selector",
          "apply": "async function apply(match) {\n  // Import the helper to get semantic suggestions\n  const { suggestSemanticKeys } = await import('../utils/semantic-helper.js');\n  \n  // Get suggestions based on the selector description\n  const suggestions = await suggestSemanticKeys(match[1]);\n  \n  if (suggestions.length === 0) {\n    return `// No semantic selector found for this element\n// Consider adding it to the mapping\npage.locator('${match[1]}')`;  \n  }\n  \n  // Format top suggestion as code\n  const bestMatch = suggestions[0];\n  const allSuggestions = suggestions.map(s => `// - ${s.key}: ${s.description}`).join('\\n');\n  \n  return `// Available semantic selectors for this element:\\n${allSuggestions}\\n\\n// Using semantic selector\\nconst selector = await getSemanticSelector('${bestMatch.key}');\npage.locator(selector)`;\n}"
        }
      ]
    },
    {
      "name": "Import Semantic Helper",
      "pattern": "import\\s+\\{\\s*test,\\s*expect\\s*\\}\\s+from\\s+[\"']@playwright\\/test[\"'];\\s*(?!import\\s+\\{\\s*getByDescription)",
      "description": "Suggests importing semantic helper when writing Playwright tests",
      "message": "Consider importing getByDescription for better test maintainability",
      "severity": "suggestion",
      "languages": ["typescript"],
      "filePattern": "**/*.spec.ts",
      "actions": [
        {
          "name": "Add Semantic Helper Import",
          "apply": "function apply(match) {\n  return `${match[0]}\\nimport { getByDescription } from '../utils/semantic-helper';`;\n}"
        }
      ]
    },
    {
      "name": "Analyze Page Semantics with Cursor",
      "pattern": "await\\s+page\\.goto\\([\"']([^\"']+)[\"']\\);",
      "description": "Suggests analyzing page semantics with Cursor",
      "message": "Use Cursor to analyze page semantics and update semantic mappings",
      "severity": "information",
      "languages": ["typescript"],
      "filePattern": "**/*.spec.ts",
      "prompts": [
        {
          "name": "Analyze Page with Cursor",
          "prompt": "@Web Visit {{match.1}} and analyze the semantic structure of the page. What elements are present and what would be good semantic selectors for them?",
          "promptFile": "semantic-ai-master.mdc"
        }
      ]
    },
    {
      "name": "Generate Playwright Test",
      "pattern": "// TODO: implement test for (.*)",
      "description": "Generates a Playwright test based on a description",
      "message": "Use Cursor to generate a Playwright test for this functionality",
      "severity": "information",
      "languages": ["typescript"],
      "filePattern": "**/*.spec.ts",
      "prompts": [
        {
          "name": "Generate Test with Semantic Selectors",
          "prompt": "@GENERATE_TEST: {{match.1}}\n\nGenerate a Playwright test for the following functionality: {{match.1}}. Use semantic selectors and best practices for test structure.",
          "promptFile": "playwright-automation-master.mdc"
        }
      ]
    },
    {
      "name": "Analyze HTML Element",
      "pattern": "<([a-z][a-z0-9]*)\\s+([^>]*)>",
      "description": "Analyzes HTML elements for semantic key generation",
      "message": "Analyze this element to generate a semantic key",
      "severity": "information",
      "languages": ["html"],
      "filePattern": "**/*.html",
      "prompts": [
        {
          "name": "Analyze Element",
          "prompt": "@ANALYZE_ELEMENT: Analyze this HTML element and suggest a semantic key:\n\n<{{match.1}} {{match.2}}>",
          "promptFile": "semantic-ai-master.mdc"
        }
      ]
    },
    {
      "name": "Enhance Semantic Keys",
      "pattern": "\"semanticKey\":\\s*\"([^\"]+)\"",
      "description": "Suggests enhancements for semantic keys",
      "message": "Consider enhancing this semantic key for better clarity",
      "severity": "suggestion",
      "languages": ["json"],
      "filePattern": "**/mappings/*.json",
      "prompts": [
        {
          "name": "Enhance Semantic Key",
          "prompt": "@ENHANCE_MAPPING: {{match.1}}\n\nReview this semantic key and suggest enhancements if needed: {{match.1}}",
          "promptFile": "semantic-ai-master.mdc"
        }
      ]
    }
  ]
} 